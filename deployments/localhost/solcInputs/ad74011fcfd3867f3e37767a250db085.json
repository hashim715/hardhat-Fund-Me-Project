{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./PriceConvertor.sol\";\n\nerror FundMe__NotOwner();\n\n/// @title FundMe Contract\n/// @author Muhammad Hashim\n/// @notice You can use this contract for only the most basic simulation\n/// @dev All function calls are currently implemented without side effects\n/// @custom:experimental This is an experimental contract.\ncontract FundMe {\n    using PriceConverter for uint256;\n\n    mapping(address => uint256) private s_addressToAmountFunded;\n    address[] private s_funders;\n\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\n    address private /* immutable */ i_owner;\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\n    \n    AggregatorV3Interface private s_priceFeed;\n\n    constructor(address s_priceFeedAddress) {\n        i_owner = msg.sender;\n        s_priceFeed=AggregatorV3Interface(s_priceFeedAddress);\n    }\n\n    function fund() public payable {\n        require(msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD, \"You need to spend more ETH!\");\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \"You need to spend more ETH!\");\n        s_addressToAmountFunded[msg.sender] += msg.value;\n        s_funders.push(msg.sender);\n    }\n    \n    modifier onlyOwner {\n        // require(msg.sender == owner);\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\n        _;\n    }\n    \n    function withdraw() public  onlyOwner {\n        for (uint256 funderIndex=0; funderIndex < s_funders.length; funderIndex++){\n            address funder = s_funders[funderIndex];\n            s_addressToAmountFunded[funder] = 0;\n        }\n        s_funders = new address[](0);\n        // // transfer\n        // payable(msg.sender).transfer(address(this).balance);\n        // // send\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\n        // require(sendSuccess, \"Send failed\");\n        // call\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        require(callSuccess, \"Call failed\");\n    }\n    function cheaperwithdraw() public payable onlyOwner{\n        address[] memory funders=s_funders;\n        //mappings can't be in memory, sorry!\n        for(uint256 funderIndex=0;funderIndex<funders.length;funderIndex++){\n            address funder=funders[funderIndex];\n            s_addressToAmountFunded[funder]=0;\n        }\n        s_funders=new address[](0);\n        (bool success,)=i_owner.call{value:address(this).balance}(\"\");\n        require(success,\"Call failed\");\n    }\n    function getOwner() public view returns(address){\n        return i_owner;\n    }\n    function getFunder(uint256 index) public view returns(address) {\n        return s_funders[index];\n    }\n    function getAddressToAmountFunded(address funder) \n        public \n        view \n        returns(uint256)\n    {\n        return s_addressToAmountFunded[funder];\n    }\n    function getPriceFeed() public view returns(AggregatorV3Interface){\n        return s_priceFeed;\n    }\n    // Explainer from: https://solidity-by-example.org/fallback/\n    // Ether is sent to contract\n    //      is msg.data empty?\n    //          /   \\ \n    //         yes  no\n    //         /     \\\n    //    receive()?  fallback() \n    //     /   \\ \n    //   yes   no\n    //  /        \\\n    //receive()  fallback()\n\n    fallback() external payable {\n        fund();\n    }\n\n    receive() external payable {\n        fund();\n    }\n}\n\n// Concepts we didn't cover yet (will cover in later sections)\n// 1. Enum\n// 2. Events\n// 3. Try / Catch\n// 4. Function Selector\n// 5. abi.encode / decode\n// 6. Hash with keccak256\n// 7. Yul / Assembly\n\n \n//Memory Definition=>It holds functions argument data and is wiped after execution\n"
    },
    "contracts/PriceConvertor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\n// Why is this a library and not abstract?\n// Why not an interface?\nlibrary PriceConverter {\n    // We could make this public, but then we'd have to deploy it\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\n        // ETH/USD rate in 18 digit\n        return uint256(answer * 10000000000);\n        // or (Both will do the same thing)\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\n    }\n\n    // 1000000000\n    function getConversionRate(uint256 ethAmount,AggregatorV3Interface priceFeed)\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\n        // or (Both will do the same thing)\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\n        return ethAmountInUsd;\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}